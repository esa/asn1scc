group p_test_cases;

PrintMain(arrsIncludedModules) ::= <<
#!/usr/bin/env python
# Code automatically generated by asn1scc tool

import unittest
from tests.BitStreamTest import BitStreamTest
<arrsIncludedModules:{sModName|<PrintImport(sModName)>}; separator="\n">

if __name__ == '__main__':
    # perform BitStream tests
    suite_BitStreamTest = unittest.TestLoader().loadTestsFromTestCase(BitStreamTest)
    unittest.TextTestRunner(verbosity=2).run(suite_BitStreamTest)
    
    <PrintTestSuites(arrsIncludedModules)>

>>

PrintImport(sModName) ::= <<
from tests.<sModName>_auto_tcs import Test<sModName>
>>

PrintTestSuites(arrsModNames) ::= <<
<arrsModNames:{sModName|<PrintTestSuite(sModName)>}; separator="\n">
>>

PrintTestSuite(sModName) ::= <<
suite_<sModName> = unittest.TestLoader().loadTestsFromTestCase(Test<sModName>)
unittest.TextTestRunner(verbosity=2).run(suite_<sModName>)
>>

PrintTests(sModName, arrsTests) ::= <<
class Test<sModName>(unittest.TestCase):
    """Test cases for <sModName>"""

    <arrsTests:{tas|<tas>}; separator="\n">
>>

PrintAutomaticTestCasesSourceFile(sHeaderFileName, arrsAdditionalDecl, arrsTypeAssignments) ::= <<
# Code automatically generated by asn1scc tool

import unittest
import asn1

from <sHeaderFileName> import *

<arrsAdditionalDecl; separator="\n">

<PrintTests(sModName=sHeaderFileName, arrsTests=arrsTypeAssignments)>

>>


/* Encode Decode start*/
ACN_UpdateParamDecl(sTasName, sStar, sParamType, sParamName, sStarParm) ::= <<
def <sTasName>_acn_encode_update_<sParamName>(value, <sParamName>): pass
>>

Codec_UpdateDecInParam(sTasName, sParamName) ::= <<
>>

Codec_Encode(sModName, sFuncName, sVal) ::= <<
encoded_value.<sFuncName>encode(bit_stream)
>>

Codec_Decode(sModName, sFuncName, sTasName, sEnc, sAmber) ::= <<
bit_stream = asn1.BitStream(bit_stream)
decoded_value.<sFuncName>decode(bit_stream)
>>

Codec_validate_output(sModName, sFuncName, sAmber) ::= <<
>>

Codec_compare_input_with_output(sModName, sFuncName, sVal, sAmber) ::= <<
self.assertLessEqual(len(bit_stream), decoded_value.REQUIRED_BITS_FOR_<sFuncName>ENCODING)
self.assertEqual(encoded_value, decoded_value)
>>


JoinItems(sPart, soNestedPart) ::= <<
<sPart>
<if(soNestedPart)>
<soNestedPart>
<endif>
>>

PrintCodec_body_header(sFuncName, sModName, sTasName, sStar, sVal) ::= <<
def test_<sFuncName>(self): pass
>>

PrintCodec_body(sModName, sFuncName, sTasName, sStar,  sVal, sEnc, sNestedStatements) ::= <<
def test_<sFuncName>(self):
    bit_stream = asn1.BitStream()
    encoded_value = <sTasName>()
    decoded_value = <sTasName>()

    <sNestedStatements>
>>